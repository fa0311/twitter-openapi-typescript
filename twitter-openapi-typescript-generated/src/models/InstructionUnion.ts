/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { TimelineAddEntries } from './TimelineAddEntries';
import {
    instanceOfTimelineAddEntries,
    TimelineAddEntriesFromJSON,
    TimelineAddEntriesFromJSONTyped,
    TimelineAddEntriesToJSON,
} from './TimelineAddEntries';
import type { TimelineAddToModule } from './TimelineAddToModule';
import {
    instanceOfTimelineAddToModule,
    TimelineAddToModuleFromJSON,
    TimelineAddToModuleFromJSONTyped,
    TimelineAddToModuleToJSON,
} from './TimelineAddToModule';
import type { TimelineClearCache } from './TimelineClearCache';
import {
    instanceOfTimelineClearCache,
    TimelineClearCacheFromJSON,
    TimelineClearCacheFromJSONTyped,
    TimelineClearCacheToJSON,
} from './TimelineClearCache';
import type { TimelineClearEntriesUnreadState } from './TimelineClearEntriesUnreadState';
import {
    instanceOfTimelineClearEntriesUnreadState,
    TimelineClearEntriesUnreadStateFromJSON,
    TimelineClearEntriesUnreadStateFromJSONTyped,
    TimelineClearEntriesUnreadStateToJSON,
} from './TimelineClearEntriesUnreadState';
import type { TimelineMarkEntriesUnreadGreaterThanSortIndex } from './TimelineMarkEntriesUnreadGreaterThanSortIndex';
import {
    instanceOfTimelineMarkEntriesUnreadGreaterThanSortIndex,
    TimelineMarkEntriesUnreadGreaterThanSortIndexFromJSON,
    TimelineMarkEntriesUnreadGreaterThanSortIndexFromJSONTyped,
    TimelineMarkEntriesUnreadGreaterThanSortIndexToJSON,
} from './TimelineMarkEntriesUnreadGreaterThanSortIndex';
import type { TimelinePinEntry } from './TimelinePinEntry';
import {
    instanceOfTimelinePinEntry,
    TimelinePinEntryFromJSON,
    TimelinePinEntryFromJSONTyped,
    TimelinePinEntryToJSON,
} from './TimelinePinEntry';
import type { TimelineReplaceEntry } from './TimelineReplaceEntry';
import {
    instanceOfTimelineReplaceEntry,
    TimelineReplaceEntryFromJSON,
    TimelineReplaceEntryFromJSONTyped,
    TimelineReplaceEntryToJSON,
} from './TimelineReplaceEntry';
import type { TimelineShowAlert } from './TimelineShowAlert';
import {
    instanceOfTimelineShowAlert,
    TimelineShowAlertFromJSON,
    TimelineShowAlertFromJSONTyped,
    TimelineShowAlertToJSON,
} from './TimelineShowAlert';
import type { TimelineShowCover } from './TimelineShowCover';
import {
    instanceOfTimelineShowCover,
    TimelineShowCoverFromJSON,
    TimelineShowCoverFromJSONTyped,
    TimelineShowCoverToJSON,
} from './TimelineShowCover';
import type { TimelineTerminateTimeline } from './TimelineTerminateTimeline';
import {
    instanceOfTimelineTerminateTimeline,
    TimelineTerminateTimelineFromJSON,
    TimelineTerminateTimelineFromJSONTyped,
    TimelineTerminateTimelineToJSON,
} from './TimelineTerminateTimeline';

/**
 * @type InstructionUnion
 * 
 * @export
 */
export type InstructionUnion = { type: 'TimelineAddEntries' } & TimelineAddEntries | { type: 'TimelineAddToModule' } & TimelineAddToModule | { type: 'TimelineClearCache' } & TimelineClearCache | { type: 'TimelineClearEntriesUnreadState' } & TimelineClearEntriesUnreadState | { type: 'TimelineMarkEntriesUnreadGreaterThanSortIndex' } & TimelineMarkEntriesUnreadGreaterThanSortIndex | { type: 'TimelinePinEntry' } & TimelinePinEntry | { type: 'TimelineReplaceEntry' } & TimelineReplaceEntry | { type: 'TimelineShowAlert' } & TimelineShowAlert | { type: 'TimelineShowCover' } & TimelineShowCover | { type: 'TimelineTerminateTimeline' } & TimelineTerminateTimeline;

export function InstructionUnionFromJSON(json: any): InstructionUnion {
    return InstructionUnionFromJSONTyped(json, false);
}

export function InstructionUnionFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstructionUnion {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'TimelineAddEntries':
            return Object.assign({}, TimelineAddEntriesFromJSONTyped(json, true), { type: 'TimelineAddEntries' } as const);
        case 'TimelineAddToModule':
            return Object.assign({}, TimelineAddToModuleFromJSONTyped(json, true), { type: 'TimelineAddToModule' } as const);
        case 'TimelineClearCache':
            return Object.assign({}, TimelineClearCacheFromJSONTyped(json, true), { type: 'TimelineClearCache' } as const);
        case 'TimelineClearEntriesUnreadState':
            return Object.assign({}, TimelineClearEntriesUnreadStateFromJSONTyped(json, true), { type: 'TimelineClearEntriesUnreadState' } as const);
        case 'TimelineMarkEntriesUnreadGreaterThanSortIndex':
            return Object.assign({}, TimelineMarkEntriesUnreadGreaterThanSortIndexFromJSONTyped(json, true), { type: 'TimelineMarkEntriesUnreadGreaterThanSortIndex' } as const);
        case 'TimelinePinEntry':
            return Object.assign({}, TimelinePinEntryFromJSONTyped(json, true), { type: 'TimelinePinEntry' } as const);
        case 'TimelineReplaceEntry':
            return Object.assign({}, TimelineReplaceEntryFromJSONTyped(json, true), { type: 'TimelineReplaceEntry' } as const);
        case 'TimelineShowAlert':
            return Object.assign({}, TimelineShowAlertFromJSONTyped(json, true), { type: 'TimelineShowAlert' } as const);
        case 'TimelineShowCover':
            return Object.assign({}, TimelineShowCoverFromJSONTyped(json, true), { type: 'TimelineShowCover' } as const);
        case 'TimelineTerminateTimeline':
            return Object.assign({}, TimelineTerminateTimelineFromJSONTyped(json, true), { type: 'TimelineTerminateTimeline' } as const);
        default:
            throw new Error(`No variant of InstructionUnion exists with 'type=${json['type']}'`);
    }
}

export function InstructionUnionToJSON(json: any): any {
    return InstructionUnionToJSONTyped(json, false);
}

export function InstructionUnionToJSONTyped(value?: InstructionUnion | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'TimelineAddEntries':
            return Object.assign({}, TimelineAddEntriesToJSON(value), { type: 'TimelineAddEntries' } as const);
        case 'TimelineAddToModule':
            return Object.assign({}, TimelineAddToModuleToJSON(value), { type: 'TimelineAddToModule' } as const);
        case 'TimelineClearCache':
            return Object.assign({}, TimelineClearCacheToJSON(value), { type: 'TimelineClearCache' } as const);
        case 'TimelineClearEntriesUnreadState':
            return Object.assign({}, TimelineClearEntriesUnreadStateToJSON(value), { type: 'TimelineClearEntriesUnreadState' } as const);
        case 'TimelineMarkEntriesUnreadGreaterThanSortIndex':
            return Object.assign({}, TimelineMarkEntriesUnreadGreaterThanSortIndexToJSON(value), { type: 'TimelineMarkEntriesUnreadGreaterThanSortIndex' } as const);
        case 'TimelinePinEntry':
            return Object.assign({}, TimelinePinEntryToJSON(value), { type: 'TimelinePinEntry' } as const);
        case 'TimelineReplaceEntry':
            return Object.assign({}, TimelineReplaceEntryToJSON(value), { type: 'TimelineReplaceEntry' } as const);
        case 'TimelineShowAlert':
            return Object.assign({}, TimelineShowAlertToJSON(value), { type: 'TimelineShowAlert' } as const);
        case 'TimelineShowCover':
            return Object.assign({}, TimelineShowCoverToJSON(value), { type: 'TimelineShowCover' } as const);
        case 'TimelineTerminateTimeline':
            return Object.assign({}, TimelineTerminateTimelineToJSON(value), { type: 'TimelineTerminateTimeline' } as const);
        default:
            throw new Error(`No variant of InstructionUnion exists with 'type=${value['type']}'`);
    }

}

