/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TypeName } from './TypeName';
import {
    TypeNameFromJSON,
    TypeNameFromJSONTyped,
    TypeNameToJSON,
    TypeNameToJSONTyped,
} from './TypeName';
import type { SocialContextLandingUrl } from './SocialContextLandingUrl';
import {
    SocialContextLandingUrlFromJSON,
    SocialContextLandingUrlFromJSONTyped,
    SocialContextLandingUrlToJSON,
    SocialContextLandingUrlToJSONTyped,
} from './SocialContextLandingUrl';
import type { NotificationTemplate } from './NotificationTemplate';
import {
    NotificationTemplateFromJSON,
    NotificationTemplateFromJSONTyped,
    NotificationTemplateToJSON,
    NotificationTemplateToJSONTyped,
} from './NotificationTemplate';
import type { ContentItemType } from './ContentItemType';
import {
    ContentItemTypeFromJSON,
    ContentItemTypeFromJSONTyped,
    ContentItemTypeToJSON,
    ContentItemTypeToJSONTyped,
} from './ContentItemType';
import type { RichMessage } from './RichMessage';
import {
    RichMessageFromJSON,
    RichMessageFromJSONTyped,
    RichMessageToJSON,
    RichMessageToJSONTyped,
} from './RichMessage';

/**
 * 
 * @export
 * @interface TimelineNotification
 */
export interface TimelineNotification {
    /**
     * 
     * @type {TypeName}
     * @memberof TimelineNotification
     */
    typename: TypeName;
    /**
     * 
     * @type {string}
     * @memberof TimelineNotification
     */
    id: string;
    /**
     * 
     * @type {ContentItemType}
     * @memberof TimelineNotification
     */
    itemType: ContentItemType;
    /**
     * 
     * @type {string}
     * @memberof TimelineNotification
     */
    notificationIcon: string;
    /**
     * 
     * @type {SocialContextLandingUrl}
     * @memberof TimelineNotification
     */
    notificationUrl: SocialContextLandingUrl;
    /**
     * 
     * @type {RichMessage}
     * @memberof TimelineNotification
     */
    richMessage: RichMessage;
    /**
     * 
     * @type {NotificationTemplate}
     * @memberof TimelineNotification
     */
    template: NotificationTemplate;
    /**
     * 
     * @type {string}
     * @memberof TimelineNotification
     */
    timestampMs: string;
}



/**
 * Check if a given object implements the TimelineNotification interface.
 */
export function instanceOfTimelineNotification(value: object): value is TimelineNotification {
    if (!('typename' in value) || value['typename'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('itemType' in value) || value['itemType'] === undefined) return false;
    if (!('notificationIcon' in value) || value['notificationIcon'] === undefined) return false;
    if (!('notificationUrl' in value) || value['notificationUrl'] === undefined) return false;
    if (!('richMessage' in value) || value['richMessage'] === undefined) return false;
    if (!('template' in value) || value['template'] === undefined) return false;
    if (!('timestampMs' in value) || value['timestampMs'] === undefined) return false;
    return true;
}

export function TimelineNotificationFromJSON(json: any): TimelineNotification {
    return TimelineNotificationFromJSONTyped(json, false);
}

export function TimelineNotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimelineNotification {
    if (json == null) {
        return json;
    }
    return {
        
        'typename': TypeNameFromJSON(json['__typename']),
        'id': json['id'],
        'itemType': ContentItemTypeFromJSON(json['itemType']),
        'notificationIcon': json['notification_icon'],
        'notificationUrl': SocialContextLandingUrlFromJSON(json['notification_url']),
        'richMessage': RichMessageFromJSON(json['rich_message']),
        'template': NotificationTemplateFromJSON(json['template']),
        'timestampMs': json['timestamp_ms'],
    };
}

export function TimelineNotificationToJSON(json: any): TimelineNotification {
    return TimelineNotificationToJSONTyped(json, false);
}

export function TimelineNotificationToJSONTyped(value?: TimelineNotification | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '__typename': TypeNameToJSON(value['typename']),
        'id': value['id'],
        'itemType': ContentItemTypeToJSON(value['itemType']),
        'notification_icon': value['notificationIcon'],
        'notification_url': SocialContextLandingUrlToJSON(value['notificationUrl']),
        'rich_message': RichMessageToJSON(value['richMessage']),
        'template': NotificationTemplateToJSON(value['template']),
        'timestamp_ms': value['timestampMs'],
    };
}

