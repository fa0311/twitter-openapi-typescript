/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TombstoneEntity } from './TombstoneEntity';
import {
    TombstoneEntityFromJSON,
    TombstoneEntityFromJSONTyped,
    TombstoneEntityToJSON,
    TombstoneEntityToJSONTyped,
} from './TombstoneEntity';

/**
 * 
 * @export
 * @interface TombstoneRichText
 */
export interface TombstoneRichText {
    /**
     * 
     * @type {Array<TombstoneEntity>}
     * @memberof TombstoneRichText
     */
    entities?: Array<TombstoneEntity>;
    /**
     * 
     * @type {boolean}
     * @memberof TombstoneRichText
     */
    rtl?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TombstoneRichText
     */
    text?: string;
}

/**
 * Check if a given object implements the TombstoneRichText interface.
 */
export function instanceOfTombstoneRichText(value: object): value is TombstoneRichText {
    return true;
}

export function TombstoneRichTextFromJSON(json: any): TombstoneRichText {
    return TombstoneRichTextFromJSONTyped(json, false);
}

export function TombstoneRichTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): TombstoneRichText {
    if (json == null) {
        return json;
    }
    return {
        
        'entities': json['entities'] == null ? undefined : ((json['entities'] as Array<any>).map(TombstoneEntityFromJSON)),
        'rtl': json['rtl'] == null ? undefined : json['rtl'],
        'text': json['text'] == null ? undefined : json['text'],
    };
}

export function TombstoneRichTextToJSON(json: any): TombstoneRichText {
    return TombstoneRichTextToJSONTyped(json, false);
}

export function TombstoneRichTextToJSONTyped(value?: TombstoneRichText | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'entities': value['entities'] == null ? undefined : ((value['entities'] as Array<any>).map(TombstoneEntityToJSON)),
        'rtl': value['rtl'],
        'text': value['text'],
    };
}

