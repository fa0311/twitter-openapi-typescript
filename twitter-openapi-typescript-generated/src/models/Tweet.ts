/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NoteTweet } from './NoteTweet';
import {
    NoteTweetFromJSON,
    NoteTweetFromJSONTyped,
    NoteTweetToJSON,
    NoteTweetToJSONTyped,
} from './NoteTweet';
import type { TypeName } from './TypeName';
import {
    TypeNameFromJSON,
    TypeNameFromJSONTyped,
    TypeNameToJSON,
    TypeNameToJSONTyped,
} from './TypeName';
import type { GrokShareAttachment } from './GrokShareAttachment';
import {
    GrokShareAttachmentFromJSON,
    GrokShareAttachmentFromJSONTyped,
    GrokShareAttachmentToJSON,
    GrokShareAttachmentToJSONTyped,
} from './GrokShareAttachment';
import type { SuperFollowsReplyUserResult } from './SuperFollowsReplyUserResult';
import {
    SuperFollowsReplyUserResultFromJSON,
    SuperFollowsReplyUserResultFromJSONTyped,
    SuperFollowsReplyUserResultToJSON,
    SuperFollowsReplyUserResultToJSONTyped,
} from './SuperFollowsReplyUserResult';
import type { TrendResults } from './TrendResults';
import {
    TrendResultsFromJSON,
    TrendResultsFromJSONTyped,
    TrendResultsToJSON,
    TrendResultsToJSONTyped,
} from './TrendResults';
import type { UserResultCore } from './UserResultCore';
import {
    UserResultCoreFromJSON,
    UserResultCoreFromJSONTyped,
    UserResultCoreToJSON,
    UserResultCoreToJSONTyped,
} from './UserResultCore';
import type { Article } from './Article';
import {
    ArticleFromJSON,
    ArticleFromJSONTyped,
    ArticleToJSON,
    ArticleToJSONTyped,
} from './Article';
import type { TweetEditControl } from './TweetEditControl';
import {
    TweetEditControlFromJSON,
    TweetEditControlFromJSONTyped,
    TweetEditControlToJSON,
    TweetEditControlToJSONTyped,
} from './TweetEditControl';
import type { CommunityRelationship } from './CommunityRelationship';
import {
    CommunityRelationshipFromJSON,
    CommunityRelationshipFromJSONTyped,
    CommunityRelationshipToJSON,
    CommunityRelationshipToJSONTyped,
} from './CommunityRelationship';
import type { TweetEditPrespective } from './TweetEditPrespective';
import {
    TweetEditPrespectiveFromJSON,
    TweetEditPrespectiveFromJSONTyped,
    TweetEditPrespectiveToJSON,
    TweetEditPrespectiveToJSONTyped,
} from './TweetEditPrespective';
import type { TweetPreviousCounts } from './TweetPreviousCounts';
import {
    TweetPreviousCountsFromJSON,
    TweetPreviousCountsFromJSONTyped,
    TweetPreviousCountsToJSON,
    TweetPreviousCountsToJSONTyped,
} from './TweetPreviousCounts';
import type { TweetView } from './TweetView';
import {
    TweetViewFromJSON,
    TweetViewFromJSONTyped,
    TweetViewToJSON,
    TweetViewToJSONTyped,
} from './TweetView';
import type { TweetCard } from './TweetCard';
import {
    TweetCardFromJSON,
    TweetCardFromJSONTyped,
    TweetCardToJSON,
    TweetCardToJSONTyped,
} from './TweetCard';
import type { AuthorCommunityRelationship } from './AuthorCommunityRelationship';
import {
    AuthorCommunityRelationshipFromJSON,
    AuthorCommunityRelationshipFromJSONTyped,
    AuthorCommunityRelationshipToJSON,
    AuthorCommunityRelationshipToJSONTyped,
} from './AuthorCommunityRelationship';
import type { UnifiedCard } from './UnifiedCard';
import {
    UnifiedCardFromJSON,
    UnifiedCardFromJSONTyped,
    UnifiedCardToJSON,
    UnifiedCardToJSONTyped,
} from './UnifiedCard';
import type { ItemResult } from './ItemResult';
import {
    ItemResultFromJSON,
    ItemResultFromJSONTyped,
    ItemResultToJSON,
    ItemResultToJSONTyped,
} from './ItemResult';
import type { QuotedRefResult } from './QuotedRefResult';
import {
    QuotedRefResultFromJSON,
    QuotedRefResultFromJSONTyped,
    QuotedRefResultToJSON,
    QuotedRefResultToJSONTyped,
} from './QuotedRefResult';
import type { BirdwatchPivot } from './BirdwatchPivot';
import {
    BirdwatchPivotFromJSON,
    BirdwatchPivotFromJSONTyped,
    BirdwatchPivotToJSON,
    BirdwatchPivotToJSONTyped,
} from './BirdwatchPivot';
import type { TweetLegacy } from './TweetLegacy';
import {
    TweetLegacyFromJSON,
    TweetLegacyFromJSONTyped,
    TweetLegacyToJSON,
    TweetLegacyToJSONTyped,
} from './TweetLegacy';
import type { Community } from './Community';
import {
    CommunityFromJSON,
    CommunityFromJSONTyped,
    CommunityToJSON,
    CommunityToJSONTyped,
} from './Community';

/**
 * 
 * @export
 * @interface Tweet
 */
export interface Tweet {
    /**
     * 
     * @type {TypeName}
     * @memberof Tweet
     */
    typename?: TypeName;
    /**
     * 
     * @type {Article}
     * @memberof Tweet
     */
    article?: Article;
    /**
     * 
     * @type {AuthorCommunityRelationship}
     * @memberof Tweet
     */
    authorCommunityRelationship?: AuthorCommunityRelationship;
    /**
     * 
     * @type {BirdwatchPivot}
     * @memberof Tweet
     */
    birdwatchPivot?: BirdwatchPivot;
    /**
     * 
     * @type {TweetCard}
     * @memberof Tweet
     */
    card?: TweetCard;
    /**
     * 
     * @type {CommunityRelationship}
     * @memberof Tweet
     */
    communityRelationship?: CommunityRelationship;
    /**
     * 
     * @type {Community}
     * @memberof Tweet
     */
    communityResults?: Community;
    /**
     * 
     * @type {UserResultCore}
     * @memberof Tweet
     */
    core?: UserResultCore;
    /**
     * 
     * @type {TweetEditControl}
     * @memberof Tweet
     */
    editControl?: TweetEditControl;
    /**
     * 
     * @type {TweetEditPrespective}
     * @memberof Tweet
     */
    editPrespective?: TweetEditPrespective;
    /**
     * 
     * @type {boolean}
     * @memberof Tweet
     */
    grokAnalysisButton?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Tweet
     */
    grokAnalysisFollowups?: Array<string>;
    /**
     * 
     * @type {GrokShareAttachment}
     * @memberof Tweet
     */
    grokShareAttachment?: GrokShareAttachment;
    /**
     * 
     * @type {boolean}
     * @memberof Tweet
     */
    hasBirdwatchNotes?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Tweet
     */
    isTranslatable?: boolean;
    /**
     * 
     * @type {TweetLegacy}
     * @memberof Tweet
     */
    legacy?: TweetLegacy;
    /**
     * 
     * @type {NoteTweet}
     * @memberof Tweet
     */
    noteTweet?: NoteTweet;
    /**
     * 
     * @type {TweetPreviousCounts}
     * @memberof Tweet
     */
    previousCounts?: TweetPreviousCounts;
    /**
     * 
     * @type {object}
     * @memberof Tweet
     */
    quickPromoteEligibility?: object;
    /**
     * 
     * @type {QuotedRefResult}
     * @memberof Tweet
     */
    quotedRefResult?: QuotedRefResult;
    /**
     * 
     * @type {ItemResult}
     * @memberof Tweet
     */
    quotedStatusResult?: ItemResult;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    restId: string;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    source?: string;
    /**
     * 
     * @type {SuperFollowsReplyUserResult}
     * @memberof Tweet
     */
    superFollowsReplyUserResult?: SuperFollowsReplyUserResult;
    /**
     * 
     * @type {TrendResults}
     * @memberof Tweet
     */
    trendResults?: TrendResults;
    /**
     * 
     * @type {UnifiedCard}
     * @memberof Tweet
     */
    unifiedCard?: UnifiedCard;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Tweet
     */
    unmentionData?: { [key: string]: any; };
    /**
     * 
     * @type {TweetView}
     * @memberof Tweet
     */
    views?: TweetView;
}



/**
 * Check if a given object implements the Tweet interface.
 */
export function instanceOfTweet(value: object): value is Tweet {
    if (!('restId' in value) || value['restId'] === undefined) return false;
    return true;
}

export function TweetFromJSON(json: any): Tweet {
    return TweetFromJSONTyped(json, false);
}

export function TweetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tweet {
    if (json == null) {
        return json;
    }
    return {
        
        'typename': json['__typename'] == null ? undefined : TypeNameFromJSON(json['__typename']),
        'article': json['article'] == null ? undefined : ArticleFromJSON(json['article']),
        'authorCommunityRelationship': json['author_community_relationship'] == null ? undefined : AuthorCommunityRelationshipFromJSON(json['author_community_relationship']),
        'birdwatchPivot': json['birdwatch_pivot'] == null ? undefined : BirdwatchPivotFromJSON(json['birdwatch_pivot']),
        'card': json['card'] == null ? undefined : TweetCardFromJSON(json['card']),
        'communityRelationship': json['community_relationship'] == null ? undefined : CommunityRelationshipFromJSON(json['community_relationship']),
        'communityResults': json['community_results'] == null ? undefined : CommunityFromJSON(json['community_results']),
        'core': json['core'] == null ? undefined : UserResultCoreFromJSON(json['core']),
        'editControl': json['edit_control'] == null ? undefined : TweetEditControlFromJSON(json['edit_control']),
        'editPrespective': json['edit_prespective'] == null ? undefined : TweetEditPrespectiveFromJSON(json['edit_prespective']),
        'grokAnalysisButton': json['grok_analysis_button'] == null ? undefined : json['grok_analysis_button'],
        'grokAnalysisFollowups': json['grok_analysis_followups'] == null ? undefined : json['grok_analysis_followups'],
        'grokShareAttachment': json['grok_share_attachment'] == null ? undefined : GrokShareAttachmentFromJSON(json['grok_share_attachment']),
        'hasBirdwatchNotes': json['has_birdwatch_notes'] == null ? undefined : json['has_birdwatch_notes'],
        'isTranslatable': json['is_translatable'] == null ? undefined : json['is_translatable'],
        'legacy': json['legacy'] == null ? undefined : TweetLegacyFromJSON(json['legacy']),
        'noteTweet': json['note_tweet'] == null ? undefined : NoteTweetFromJSON(json['note_tweet']),
        'previousCounts': json['previous_counts'] == null ? undefined : TweetPreviousCountsFromJSON(json['previous_counts']),
        'quickPromoteEligibility': json['quick_promote_eligibility'] == null ? undefined : json['quick_promote_eligibility'],
        'quotedRefResult': json['quotedRefResult'] == null ? undefined : QuotedRefResultFromJSON(json['quotedRefResult']),
        'quotedStatusResult': json['quoted_status_result'] == null ? undefined : ItemResultFromJSON(json['quoted_status_result']),
        'restId': json['rest_id'],
        'source': json['source'] == null ? undefined : json['source'],
        'superFollowsReplyUserResult': json['superFollowsReplyUserResult'] == null ? undefined : SuperFollowsReplyUserResultFromJSON(json['superFollowsReplyUserResult']),
        'trendResults': json['trend_results'] == null ? undefined : TrendResultsFromJSON(json['trend_results']),
        'unifiedCard': json['unified_card'] == null ? undefined : UnifiedCardFromJSON(json['unified_card']),
        'unmentionData': json['unmention_data'] == null ? undefined : json['unmention_data'],
        'views': json['views'] == null ? undefined : TweetViewFromJSON(json['views']),
    };
}

export function TweetToJSON(json: any): Tweet {
    return TweetToJSONTyped(json, false);
}

export function TweetToJSONTyped(value?: Tweet | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '__typename': TypeNameToJSON(value['typename']),
        'article': ArticleToJSON(value['article']),
        'author_community_relationship': AuthorCommunityRelationshipToJSON(value['authorCommunityRelationship']),
        'birdwatch_pivot': BirdwatchPivotToJSON(value['birdwatchPivot']),
        'card': TweetCardToJSON(value['card']),
        'community_relationship': CommunityRelationshipToJSON(value['communityRelationship']),
        'community_results': CommunityToJSON(value['communityResults']),
        'core': UserResultCoreToJSON(value['core']),
        'edit_control': TweetEditControlToJSON(value['editControl']),
        'edit_prespective': TweetEditPrespectiveToJSON(value['editPrespective']),
        'grok_analysis_button': value['grokAnalysisButton'],
        'grok_analysis_followups': value['grokAnalysisFollowups'],
        'grok_share_attachment': GrokShareAttachmentToJSON(value['grokShareAttachment']),
        'has_birdwatch_notes': value['hasBirdwatchNotes'],
        'is_translatable': value['isTranslatable'],
        'legacy': TweetLegacyToJSON(value['legacy']),
        'note_tweet': NoteTweetToJSON(value['noteTweet']),
        'previous_counts': TweetPreviousCountsToJSON(value['previousCounts']),
        'quick_promote_eligibility': value['quickPromoteEligibility'],
        'quotedRefResult': QuotedRefResultToJSON(value['quotedRefResult']),
        'quoted_status_result': ItemResultToJSON(value['quotedStatusResult']),
        'rest_id': value['restId'],
        'source': value['source'],
        'superFollowsReplyUserResult': SuperFollowsReplyUserResultToJSON(value['superFollowsReplyUserResult']),
        'trend_results': TrendResultsToJSON(value['trendResults']),
        'unified_card': UnifiedCardToJSON(value['unifiedCard']),
        'unmention_data': value['unmentionData'],
        'views': TweetViewToJSON(value['views']),
    };
}

